// <auto-generated />
using System;
using MatchMakings.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatchMakings.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250618192540_updateUserType")]
    partial class updateUserType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MatchMakings.Core.Models.BaseUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaleId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("WomenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId");

                    b.HasIndex("MatchMakerId");

                    b.HasIndex("WomenId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.FamilyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FamilyAbout")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FamilyRabbi")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherAffiliation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherOrigin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherYeshiva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HealthStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaleId")
                        .HasColumnType("int");

                    b.Property<string>("MotherGraduateSeminar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotherOrigin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotherPreviousName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("ParentsStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("WomenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId")
                        .IsUnique();

                    b.HasIndex("WomenId")
                        .IsUnique();

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaleId")
                        .HasColumnType("int");

                    b.Property<int?>("MaleId1")
                        .HasColumnType("int");

                    b.Property<int>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchMakerId1")
                        .HasColumnType("int");

                    b.Property<int?>("NumMeetings")
                        .HasColumnType("int");

                    b.Property<int>("WomenId")
                        .HasColumnType("int");

                    b.Property<int?>("WomenId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId");

                    b.HasIndex("MaleId1");

                    b.HasIndex("MatchMakerId");

                    b.HasIndex("MatchMakerId1");

                    b.HasIndex("WomenId");

                    b.HasIndex("WomenId1");

                    b.ToTable("MatchMakings");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchMakingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MeetingPlace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("NumMeeting")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchMakingId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchMakerId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Male", b =>
                {
                    b.HasBaseType("MatchMakings.Core.Models.BaseUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AgeFrom")
                        .HasColumnType("int");

                    b.Property<int>("AgeTo")
                        .HasColumnType("int");

                    b.Property<bool>("AnOutsider")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Appearance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackGround")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Beard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BigYeshiva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("BurnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Club")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DriversLicense")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExpectationsFromPartner")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FacePaint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralAppearance")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HeadCovering")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HealthCondition")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<string>("Hot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImportantTraitsIAmLookingFor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImportantTraitsInMe")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Kibbutz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotherPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Openness")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PairingType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("PreferredProfessionalPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreferredSeminarStyle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SmallYeshiva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Smoker")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("StatusVacant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Suit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TZFormName")
                        .HasColumnType("longtext");

                    b.Property<string>("TZFormUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Man");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaker", b =>
                {
                    b.HasBaseType("MatchMakings.Core.Models.BaseUser");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Community")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExperienceInShidduchim")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasChildrenInShidduchim")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IdNumber")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsInternalMatchmaker")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsSeminarGraduate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LandlinePhone")
                        .HasColumnType("longtext");

                    b.Property<string>("LifeSkills")
                        .HasColumnType("longtext");

                    b.Property<string>("MatchmakerName")
                        .HasColumnType("longtext");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("longtext");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalClub")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneType")
                        .HasColumnType("longtext");

                    b.Property<string>("PreviousWorkplaces")
                        .HasColumnType("longtext");

                    b.Property<string>("PrintingNotes")
                        .HasColumnType("longtext");

                    b.Property<int?>("YearsInShidduchim")
                        .HasColumnType("int");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("MatchMaker_Address");

                            t.Property("City")
                                .HasColumnName("MatchMaker_City");

                            t.Property("Email")
                                .HasColumnName("MatchMaker_Email");

                            t.Property("Occupation")
                                .HasColumnName("MatchMaker_Occupation");
                        });

                    b.HasDiscriminator().HasValue("Matchmaker");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Women", b =>
                {
                    b.HasBaseType("MatchMakings.Core.Models.BaseUser");

                    b.Property<string>("AdditionalEducationalInstitution")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AgeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("int");

                    b.Property<bool?>("AnOutsider")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Appearance")
                        .HasColumnType("longtext");

                    b.Property<string>("BackGround")
                        .HasColumnType("longtext");

                    b.Property<string>("Beard")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BurnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Class")
                        .HasColumnType("longtext");

                    b.Property<string>("Club")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrentOccupation")
                        .HasColumnType("longtext");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FacePaint")
                        .HasColumnType("longtext");

                    b.Property<string>("FatherPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralAppearance")
                        .HasColumnType("longtext");

                    b.Property<string>("Hat")
                        .HasColumnType("longtext");

                    b.Property<string>("HeadCovering")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HealthCondition")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Height")
                        .HasColumnType("double");

                    b.Property<string>("HighSchool")
                        .HasColumnType("longtext");

                    b.Property<string>("ImportantTraitsIMLookingFor")
                        .HasColumnType("longtext");

                    b.Property<string>("ImportantTraitsInMe")
                        .HasColumnType("longtext");

                    b.Property<string>("InterestedInBoy")
                        .HasColumnType("longtext");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("longtext");

                    b.Property<string>("MotherPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext");

                    b.Property<string>("Openness")
                        .HasColumnType("longtext");

                    b.Property<string>("PairingType")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("PreferredSittingStyle")
                        .HasColumnType("longtext");

                    b.Property<string>("Seminar")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Smoker")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<bool?>("StatusVacant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("StudyPath")
                        .HasColumnType("longtext");

                    b.Property<string>("Suit")
                        .HasColumnType("longtext");

                    b.Property<string>("TZFormName")
                        .HasColumnType("longtext");

                    b.Property<string>("TZFormUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Tz")
                        .HasColumnType("longtext");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("Women_Address");

                            t.Property("Age")
                                .HasColumnName("Women_Age");

                            t.Property("AgeFrom")
                                .HasColumnName("Women_AgeFrom");

                            t.Property("AgeTo")
                                .HasColumnName("Women_AgeTo");

                            t.Property("AnOutsider")
                                .HasColumnName("Women_AnOutsider");

                            t.Property("Appearance")
                                .HasColumnName("Women_Appearance");

                            t.Property("BackGround")
                                .HasColumnName("Women_BackGround");

                            t.Property("Beard")
                                .HasColumnName("Women_Beard");

                            t.Property("BurnDate")
                                .HasColumnName("Women_BurnDate");

                            t.Property("City")
                                .HasColumnName("Women_City");

                            t.Property("Class")
                                .HasColumnName("Women_Class");

                            t.Property("Club")
                                .HasColumnName("Women_Club");

                            t.Property("Country")
                                .HasColumnName("Women_Country");

                            t.Property("Email")
                                .HasColumnName("Women_Email");

                            t.Property("FacePaint")
                                .HasColumnName("Women_FacePaint");

                            t.Property("FatherPhone")
                                .HasColumnName("Women_FatherPhone");

                            t.Property("GeneralAppearance")
                                .HasColumnName("Women_GeneralAppearance");

                            t.Property("HeadCovering")
                                .HasColumnName("Women_HeadCovering");

                            t.Property("HealthCondition")
                                .HasColumnName("Women_HealthCondition");

                            t.Property("Height")
                                .HasColumnName("Women_Height");

                            t.Property("ImportantTraitsInMe")
                                .HasColumnName("Women_ImportantTraitsInMe");

                            t.Property("MoreInformation")
                                .HasColumnName("Women_MoreInformation");

                            t.Property("MotherPhone")
                                .HasColumnName("Women_MotherPhone");

                            t.Property("Occupation")
                                .HasColumnName("Women_Occupation");

                            t.Property("Openness")
                                .HasColumnName("Women_Openness");

                            t.Property("PairingType")
                                .HasColumnName("Women_PairingType");

                            t.Property("Phone")
                                .HasColumnName("Women_Phone");

                            t.Property("PhotoName")
                                .HasColumnName("Women_PhotoName");

                            t.Property("PhotoUrl")
                                .HasColumnName("Women_PhotoUrl");

                            t.Property("Smoker")
                                .HasColumnName("Women_Smoker");

                            t.Property("Status")
                                .HasColumnName("Women_Status");

                            t.Property("StatusVacant")
                                .HasColumnName("Women_StatusVacant");

                            t.Property("Suit")
                                .HasColumnName("Women_Suit");

                            t.Property("TZFormName")
                                .HasColumnName("Women_TZFormName");

                            t.Property("TZFormUrl")
                                .HasColumnName("Women_TZFormUrl");

                            t.Property("Tz")
                                .HasColumnName("Women_Tz");
                        });

                    b.HasDiscriminator().HasValue("Woman");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Contact", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.Male", "Male")
                        .WithMany("Acquaintances")
                        .HasForeignKey("MaleId");

                    b.HasOne("MatchMakings.Core.Models.MatchMaker", "MatchMaker")
                        .WithMany("Recommend")
                        .HasForeignKey("MatchMakerId");

                    b.HasOne("MatchMakings.Core.Models.Women", "Women")
                        .WithMany("Contacts")
                        .HasForeignKey("WomenId");

                    b.Navigation("Male");

                    b.Navigation("MatchMaker");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.FamilyDetails", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.Male", "Male")
                        .WithOne("FamilyDetails")
                        .HasForeignKey("MatchMakings.Core.Models.FamilyDetails", "MaleId");

                    b.HasOne("MatchMakings.Core.Models.Women", "Women")
                        .WithOne("FamilyDetails")
                        .HasForeignKey("MatchMakings.Core.Models.FamilyDetails", "WomenId");

                    b.Navigation("Male");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.Male", "Male")
                        .WithMany()
                        .HasForeignKey("MaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.Male", null)
                        .WithMany("Matchings")
                        .HasForeignKey("MaleId1");

                    b.HasOne("MatchMakings.Core.Models.MatchMaker", "MatchMaker")
                        .WithMany()
                        .HasForeignKey("MatchMakerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.MatchMaker", null)
                        .WithMany("Matches")
                        .HasForeignKey("MatchMakerId1");

                    b.HasOne("MatchMakings.Core.Models.Women", "Women")
                        .WithMany()
                        .HasForeignKey("WomenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.Women", null)
                        .WithMany("Matchings")
                        .HasForeignKey("WomenId1");

                    b.Navigation("Male");

                    b.Navigation("MatchMaker");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Meeting", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.MatchMaking", "MatchMaking")
                        .WithMany("Meetings")
                        .HasForeignKey("MatchMakingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchMaking");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Note", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.MatchMaker", "MatchMaker")
                        .WithMany()
                        .HasForeignKey("MatchMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.BaseUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("MatchMaker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.RolePermission", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.UserRole", b =>
                {
                    b.HasOne("MatchMakings.Core.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchMakings.Core.Models.BaseUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.BaseUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaking", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Male", b =>
                {
                    b.Navigation("Acquaintances");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Matchings");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.MatchMaker", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Recommend");
                });

            modelBuilder.Entity("MatchMakings.Core.Models.Women", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Matchings");
                });
#pragma warning restore 612, 618
        }
    }
}
